// ===== EMERGENCY BUTTON FIX =====
console.log('üö® Cargando fix de emergencia para botones...');

// Verificar si las funciones ya est√°n disponibles
function checkAndFixButtons() {
    console.log('üîç Verificando funciones de botones...');
    
    // Si las funciones no est√°n disponibles, crearlas directamente
    if (typeof window.showLoginForm !== 'function') {
        console.log('‚ö†Ô∏è showLoginForm no disponible, creando funci√≥n de emergencia');
        window.showLoginForm = function() {
            console.log('üö® EMERGENCY: Redirigiendo a login');
            window.location.href = 'login.html';
        };
    }
    
    if (typeof window.showRegisterForm !== 'function') {
        console.log('‚ö†Ô∏è showRegisterForm no disponible, creando funci√≥n de emergencia');
        window.showRegisterForm = function() {
            console.log('üö® EMERGENCY: Redirigiendo a registro');
            window.location.href = 'register.html';
        };
    }
    
    if (typeof window.handleLogout !== 'function') {
        console.log('‚ö†Ô∏è handleLogout no disponible, creando funci√≥n de emergencia');
        window.handleLogout = function() {
            console.log('üö® EMERGENCY: Cerrando sesi√≥n');
            if (firebase && firebase.auth) {
                firebase.auth().signOut().then(() => {
                    alert('Has cerrado sesi√≥n correctamente');
                    window.location.reload();
                }).catch((error) => {
                    console.error('Error al cerrar sesi√≥n:', error);
                    alert('Error al cerrar sesi√≥n');
                });
            } else {
                alert('Sistema de autenticaci√≥n no disponible');
                window.location.reload();
            }
        };
    }
    
    // Verificar que los botones tengan los event listeners
    const loginBtn = document.querySelector('button[onclick="showLoginForm()"]');
    const registerBtn = document.querySelector('button[onclick="showRegisterForm()"]');
    
    if (loginBtn) {
        console.log('‚úÖ Bot√≥n de login encontrado');
        // Agregar listener adicional por si acaso
        loginBtn.addEventListener('click', function(e) {
            console.log('üñ±Ô∏è Click en bot√≥n login detectado');
            if (typeof window.showLoginForm === 'function') {
                window.showLoginForm();
            } else {
                console.log('üö® Funci√≥n no disponible, redirigiendo directamente');
                window.location.href = 'login.html';
            }
        });
    } else {
        console.log('‚ùå Bot√≥n de login no encontrado');
    }
    
    if (registerBtn) {
        console.log('‚úÖ Bot√≥n de registro encontrado');
        // Agregar listener adicional por si acaso
        registerBtn.addEventListener('click', function(e) {
            console.log('üñ±Ô∏è Click en bot√≥n registro detectado');
            if (typeof window.showRegisterForm === 'function') {
                window.showRegisterForm();
            } else {
                console.log('üö® Funci√≥n no disponible, redirigiendo directamente');
                window.location.href = 'register.html';
            }
        });
    } else {
        console.log('‚ùå Bot√≥n de registro no encontrado');
    }
    
    console.log('üß™ Estado final de funciones:');
    console.log('showLoginForm:', typeof window.showLoginForm);
    console.log('showRegisterForm:', typeof window.showRegisterForm);
    console.log('handleLogout:', typeof window.handleLogout);
}

// Ejecutar inmediatamente si el DOM ya est√° listo
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', checkAndFixButtons);
} else {
    checkAndFixButtons();
}

// Tambi√©n ejecutar despu√©s de un delay para asegurar que todo est√© cargado
setTimeout(checkAndFixButtons, 2000);

console.log('‚úÖ Emergency button fix cargado');
